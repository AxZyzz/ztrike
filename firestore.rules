rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidPost() {
      let hasRequired = request.resource.data.keys().hasAll(['content', 'authorId', 'createdAt']);
      let isOwned = request.auth.uid == request.resource.data.authorId;
      return hasRequired && isOwned;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && 
          request.resource.data.fromId == request.auth.uid;
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }

    // Teams
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || 
         resource.data.adminIds.hasAny([request.auth.uid]));
    }

    // Leagues
    match /leagues/{leagueId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || 
         resource.data.adminIds.hasAny([request.auth.uid]));
    }

    // Messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidPost();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.authorId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.authorId;
    }

    // Comments subcollection
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.authorId;
    }
  }
}